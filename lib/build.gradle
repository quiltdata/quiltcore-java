/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // AWS SDK
    implementation 'software.amazon.awssdk:s3:2.20.102'
    implementation 'software.amazon.awssdk:s3-transfer-manager:2.20.102'
    implementation 'software.amazon.awssdk.crt:aws-crt:0.23.2'

    // JSON and YAML parsing.
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2'

    // JSON Schema validator.
    implementation 'io.vertx:vertx-json-schema:4.5.7'

    // Workarounds for Java's checked exceptions.
    implementation 'com.pivovarit:throwing-function:1.5.1'

    // Use JUnit test framework.
    testImplementation('org.junit.jupiter:junit-jupiter:5.10.0')
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

// Enable Java 11 compatibility to support NextFlow.
tasks {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

compileJava {
    options.release.set(11)
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.quiltdata'
            artifactId = 'quiltcore'
            version = '0.1'

            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'QuiltCore'
                description = 'Java implementation of the Quilt API'
                url = 'https://quiltdata.com'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/quiltdata/quiltcore-java.git'
                    developerConnection = 'scm:git:ssh://github.com/quiltdata/quiltcore-java.git'
                    url = 'https://github.com/quiltdata/quiltcore-java'
                }

                developers {
                    developer {
                        id = 'dima'
                        name = 'Dima Ryazanov'
                        email = 'dima@quiltdata.io'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username project.properties.sonatypeUsername
                password project.properties.sonatypePassword
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
